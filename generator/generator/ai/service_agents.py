"""Service generation agents for REST and SOAP services.

Lightweight generators that produce starter Java artifacts for REST controllers
and minimal SOAP WSDL/XSD/JAXB + Spring-WS endpoint stubs. These are intended
as scaffold templates the developer can extend.
"""
from pathlib import Path
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)


class RestServiceAgent:
    """Generate a minimal REST controller and service for a ProcessContext.

    generate() returns a dict mapping file paths -> file contents.
    """

    def __init__(self, process_context: Any):
        self.ctx = process_context

    def generate(self) -> Dict[str, str]:
        files: Dict[str, str] = {}
        out = Path(self.ctx.output_folder)
        pkg = self.ctx.package_root + '.' + out.name.replace('-', '_')

        controller_dir = out / 'src' / 'main' / 'java' / pkg.replace('.', '/') / 'controller'
        controller_dir.mkdir(parents=True, exist_ok=True)
        controller_file = controller_dir / 'AutoGeneratedController.java'
        files[str(controller_file)] = self._controller_template(pkg)

        service_dir = out / 'src' / 'main' / 'java' / pkg.replace('.', '/') / 'service'
        service_dir.mkdir(parents=True, exist_ok=True)
        service_file = service_dir / 'AutoGeneratedService.java'
        files[str(service_file)] = self._service_template(pkg)

        resources_dir = out / 'src' / 'main' / 'resources'
        resources_dir.mkdir(parents=True, exist_ok=True)
        files[str(resources_dir / 'application.yml')] = 'spring:\n  application:\n    name: autogenerated-rest-service'

        logger.info("Generated REST skeleton for %s", out)
        return files

    def _controller_template(self, pkg: str) -> str:
        tpl = (
            "package {pkg}.controller;\n\n"
            "import org.springframework.web.bind.annotation.GetMapping;\n"
            "import org.springframework.web.bind.annotation.RestController;\n\n"
            "@RestController\n"
            "public class AutoGeneratedController {{\n\n"
            "    @GetMapping(\"/ping\")\n"
            "    public String ping() {{\n"
            "        return \"pong\";\n"
            "    }}\n"
            "}}\n"
        )
        return tpl.format(pkg=pkg)

    def _service_template(self, pkg: str) -> str:
        tpl = (
            "package {pkg}.service;\n\n"
            "public class AutoGeneratedService {{\n"
            "    public String hello() {{\n"
            "        return \"hello\";\n"
            "    }}\n"
            "}}\n"
        )
        return tpl.format(pkg=pkg)


class SoapServiceAgent:
    """Generate complete Spring-WS SOAP service: WSDL configuration, endpoint,
    JAXB-annotated DTOs, and full POM with Spring Boot dependencies.
    """

    def __init__(self, process_context: Any):
        self.ctx = process_context

    def generate(self) -> Dict[str, str]:
        files: Dict[str, str] = {}
        out = Path(self.ctx.output_folder)
        pkg = self.ctx.package_root + '.' + out.name.replace('-', '_')

        # Copy XSDs for JAXB
        xsd_dst = out / 'src' / 'main' / 'resources' / 'xsd'
        xsd_dst.mkdir(parents=True, exist_ok=True)
        for xsd in getattr(self.ctx, 'schemas', []):
            try:
                content = xsd.read_text(encoding='utf-8')
                files[str(xsd_dst / xsd.name)] = content
            except Exception:
                pass

        # Spring Boot Application class
        app_dir = out / 'src' / 'main' / 'java' / pkg.replace('.', '/')
        app_dir.mkdir(parents=True, exist_ok=True)
        files[str(app_dir / 'SoapServiceApplication.java')] = self._application_template(pkg)

        # WebService Configuration
        config_dir = app_dir / 'config'
        config_dir.mkdir(parents=True, exist_ok=True)
        files[str(config_dir / 'WebServiceConfig.java')] = self._ws_config_template(pkg)
        files[str(config_dir / 'WebClientConfig.java')] = self._webclient_config_template(pkg)

        # SOAP Endpoint
        endpoint_dir = app_dir / 'endpoint'
        endpoint_dir.mkdir(parents=True, exist_ok=True)
        files[str(endpoint_dir / 'LoanApplicationEndpoint.java')] = self._endpoint_template(pkg)

        # Application.yml
        resources_dir = out / 'src' / 'main' / 'resources'
        resources_dir.mkdir(parents=True, exist_ok=True)
        files[str(resources_dir / 'application.yml')] = self._application_yml_template()

        # Complete Spring Boot POM
        files[str(out / 'pom.xml')] = self._soap_pom_template(out.name, pkg)

        # README
        files[str(out / 'README.md')] = self._readme_template()

        logger.info("Generated complete Spring-WS SOAP service for %s", out)
        return files

    def _application_template(self, pkg: str) -> str:
        return f"""package {pkg};

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SoapServiceApplication {{

    public static void main(String[] args) {{
        SpringApplication.run(SoapServiceApplication.class, args);
    }}
}}
"""

    def _ws_config_template(self, pkg: str) -> str:
        return f"""package {pkg}.config;

import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.XsdSchema;

@EnableWs
@Configuration
public class WebServiceConfig extends WsConfigurerAdapter {{

    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(
            ApplicationContext applicationContext) {{
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(applicationContext);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }}

    @Bean(name = "loanApplication")
    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema loanRequestSchema) {{
        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
        wsdl11Definition.setPortTypeName("LoanApplicationPort");
        wsdl11Definition.setLocationUri("/ws");
        wsdl11Definition.setTargetNamespace("http://example.com/tibco_migration/loan");
        wsdl11Definition.setSchema(loanRequestSchema);
        return wsdl11Definition;
    }}

    @Bean
    public XsdSchema loanRequestSchema() {{
        return new SimpleXsdSchema(new ClassPathResource("xsd/loan_request.xsd"));
    }}
}}
"""

    def _webclient_config_template(self, pkg: str) -> str:
        return f"""package {pkg}.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {{

    @Value("${{creditscore.service.url:http://localhost:8082/creditscore}}")
    private String creditScoreServiceUrl;

    @Bean
    public WebClient webClient() {{
        return WebClient.builder()
                .baseUrl(creditScoreServiceUrl)
                .build();
    }}
}}
"""

    def _endpoint_template(self, pkg: str) -> str:
        return f"""package {pkg}.endpoint;

import {pkg}.dto.*;
import {pkg}.service.LoanApplicationService;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

@Endpoint
public class LoanApplicationEndpoint {{

    private static final String NAMESPACE_URI = "http://example.com/tibco_migration/loan";

    private final LoanApplicationService service;

    public LoanApplicationEndpoint(LoanApplicationService service) {{
        this.service = service;
    }}

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "LoanApplicationRequest")
    @ResponsePayload
    public LoanApplicationResponse applyForLoan(@RequestPayload LoanApplicationRequest request) {{
        return service.applyForLoan(request);
    }}
}}
"""

    def _application_yml_template(self) -> str:
        return """server:
  port: 8081

spring:
  application:
    name: tibco-migration-soap-service
  
  datasource:
    url: jdbc:h2:mem:loandb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  artemis:
    mode: embedded
  
  jms:
    template:
      default-destination: LoanStatusQueue

creditscore:
  service:
    url: http://localhost:8082/creditscore

logging:
  level:
    org.springframework.ws: DEBUG
"""

    def _soap_pom_template(self, artifact_id: str, pkg: str) -> str:
        return f"""<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>

    <groupId>{pkg}</groupId>
    <artifactId>{artifact_id}</artifactId>
    <version>0.1.0</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web-services</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-artemis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>xjc</id>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <sources>
                        <source>src/main/resources/xsd</source>
                    </sources>
                    <packageName>{pkg}.dto.jaxb</packageName>
                    <clearOutputDir>false</clearOutputDir>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
"""

    def _readme_template(self) -> str:
        return """# TIBCO Migration - SOAP Service

Spring Boot SOAP web service implementation migrated from TIBCO BusinessWorks.

## Quick Start

1. Build: `mvn clean package`
2. Run: `mvn spring-boot:run`
3. Access WSDL: http://localhost:8081/ws/loanApplication.wsdl

## Features

- Spring-WS SOAP 1.1/1.2 service
- JAXB XML marshalling
- JPA database integration
- JMS messaging support
- Auto-generated WSDL

See pom.xml and application.yml for configuration details.
"""
